// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=subtract_98d5ae3b2f
ROOST_METHOD_SIG_HASH=subtract_65b12bbd04

================================VULNERABILITIES================================
Vulnerability: None
Issue: The provided Java code is a straightforward, basic function that subtracts one integer from another. There is no vulnerability or security issue to mention.
Solution: No actions needed.

================================================================================
Scenario 1: Test Subtraction of Two Positive Numbers

  Details:
    TestName: testSubtractPositiveNumbers
    Description: This test is meant to check whether the subtract method is able to properly subtract two positive numbers.
  Execution:
    Arrange: Initialize two positive integers.
    Act: Invoke the subtract method with the two positive integers as parameters.
    Assert: Use JUnit to validate that the result matches the expected output.
  Validation:
    This test aims to verify that the subtraction of the two positive numbers is accurate. It reflects basic functionality.


Scenario 2: Test Subtraction of Two Negative Numbers

  Details:
    TestName: testSubtractNegativeNumbers
    Description: This test is meant to check whether the subtract method can correctly handle the subtraction of two negative numbers.
  Execution:
    Arrange: Initialize two negative integers.
    Act: Call the subtract method with the two negative integers as parameters.
    Assert: Use JUnit to validate that the result matches the expected outcome.
  Validation:
    This test aims to verify the accurate subtraction of two negative numbers. It tests the subtract method's ability to handle negative integers.


Scenario 3: Test Subtraction of a Positive and a Negative Number

  Details:
    TestName: testSubtractPositiveAndNegative
    Description: The test is meant to check if the subtract method can correctly handle a case where a positive integer is subtracted from a negative integer.
  Execution:
    Arrange: Initialize a positive and a negative integer.
    Act: Invoke the subtract method with the positive and negative integers as parameters.
    Assert: Use JUnit to check that the result matches the expected output.
  Validation:
    This test aims to confirm that the subtract method can accurately handle the subtraction of a positive integer from a negative integer.


Scenario 4: Test Subtraction of Zero

  Details:
    TestName: testSubtractZero
    Description: This test is meant to check if the subtract method can correctly handle a zero subtraction scenario.
  Execution:
    Arrange: Initialize a number and zero.
    Act: Invoke the subtract method with the number and zero as parameters.
    Assert: Use JUnit to validate that the result matches the number.
  Validation:
    This test aims to verify the specific functionality where zero is subtracted from a number. The expected result is the number itself.


Scenario 5: Test Subtraction Resulting Zero

  Details:
    TestName: testSubtractResultZero
    Description: This test is meant to check if the subtract method can correctly handle a scenario in which the subtraction results in zero.
  Execution:
    Arrange: Initialize two similar numbers.
    Act: Invoke the subtract method with these two same numbers as parameters.
    Assert: Use JUnit to validate that the result is indeed zero.
  Validation:
    This test aims to verify the special functionality where two similar numbers are subtracted. The expected result is zero, which represents the proper program behavior under these conditions.
*/

// ********RoostGPT********
package io.javabrains.utils;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class MathUtilsSubtractTest {

	@Test
	public void testSubtractPositiveNumbers() {
		MathUtils mathUtils = new MathUtils();
		int result = mathUtils.subtract(10, 5);
		assertEquals(5, result);
	}

	@Test
	public void testSubtractNegativeNumbers() {
		MathUtils mathUtils = new MathUtils();
		int result = mathUtils.subtract(-10, -5);
		assertEquals(-5, result);
	}

	@Test
	public void testSubtractPositiveAndNegative() {
		MathUtils mathUtils = new MathUtils();
		int result = mathUtils.subtract(-10, 5);
		assertEquals(-15, result);
	}

	@Test
	public void testSubtractZero() {
		MathUtils mathUtils = new MathUtils();
		int result = mathUtils.subtract(10, 0);
		assertEquals(10, result);
	}

	@Test
	public void testSubtractResultZero() {
		MathUtils mathUtils = new MathUtils();
		int result = mathUtils.subtract(10, 10);
		assertEquals(0, result);
	}

}
