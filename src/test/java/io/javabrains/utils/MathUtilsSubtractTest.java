// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=subtract_98d5ae3b2f
ROOST_METHOD_SIG_HASH=subtract_65b12bbd04

"""
  Scenario 1: Positive Integer Subtraction

  Details:
    TestName: testPositiveIntegerSubtraction.
    Description: This test is meant to check if the method correctly subtracts two simple positive integers.
  Execution:
    Arrange: a=5, b=3.
    Act: Invoke subtract method with a and b.
    Assert: The result should be 2.
  Validation:
    Here we aim to verify that the method is able to correctly subtract positive integers. The expected result is 2 because 5 minus 3 equals 2. This is the basic use case and tests the core functionality of the method.

  Scenario 2: Negative Integer Subtraction

  Details:
    TestName: testNegativeIntegerSubtraction.
    Description: This test is meant to check if the method is correctly able to handle and subtract negative integers.
  Execution:
    Arrange: a=-5, b=-3.
    Act: Invoke subtract method with a and b.
    Assert: The result should be -2.
  Validation:
    Here we aim to verify that the method is able to correctly subtract negative integers. The expected result is -2 because -5 minus -3 equals -2. This is important as it tests the method's ability to handle negative numbers.

  Scenario 3: Zero Integer Subtraction

  Details:
    TestName: testZeroIntegerSubtraction.
    Description: This test is meant to check if the method is correctly able to handle subtraction involving zero.
  Execution:
    Arrange: a=0, b=3.
    Act: Invoke subtract method with a and b.
    Assert: The result should be -3.
  Validation:
    Here we aim to verify that the method is able to correctly subtract an integer from zero. The expected result is -3 because 0 minus 3 equals -3. This is important as it tests the method's ability to handle zero as a boundary case.

  Scenario 4: Identical Integer Subtraction

  Details:
    TestName: testIdenticalIntegerSubtraction.
    Description: This test is meant to check the subtract method handling of identical integer inputs.
  Execution:
    Arrange: a=3, b=3.
    Act: Invoke subtract method with a and b.
    Assert: The result is 0.
  Validation:
    Here we aim to verify the correct subtraction of identical integers, which should always result in 0. This is important as it tests the method's ability to handle identical inputs. This test also indirectly tests for integer overflow, assuming that the integers are at the boundary of the integer range.
  """
*/

// ********RoostGPT********
package io.javabrains.utils;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class MathUtilsSubtractTest {

	private MathUtils mathUtils = new MathUtils();

	@Test
	public void testPositiveIntegerSubtraction() {
		int a = 5;
		int b = 3;
		int expected = 2;
		int actual = mathUtils.subtract(a, b);
		assertEquals(expected, actual);
	}

	@Test
	public void testNegativeIntegerSubtraction() {
		int a = -5;
		int b = -3;
		int expected = -2;
		int actual = mathUtils.subtract(a, b);
		assertEquals(expected, actual);
	}

	@Test
	public void testZeroIntegerSubtraction() {
		int a = 0;
		int b = 3;
		int expected = -3;
		int actual = mathUtils.subtract(a, b);
		assertEquals(expected, actual);
	}

	@Test
	public void testIdenticalIntegerSubtraction() {
		int a = 3;
		int b = 3;
		int expected = 0;
		int actual = mathUtils.subtract(a, b);
		assertEquals(expected, actual);
	}

}

class MathUtils {

	public int subtract(int a, int b) {
		return a - b;
	}

}